; Automatically generated by map2smt

(set-logic HORN)

(declare-datatypes ((listOfInt 0) )
(((conslistOfInt (headlistOfInt Int) (taillistOfInt listOfInt)) (nillistOfInt))))



(declare-fun insort (Int listOfInt listOfInt) Bool)
(declare-fun less (Int Int Bool) Bool)
(declare-fun leq (Int Int Bool) Bool)
(declare-fun sort (listOfInt listOfInt) Bool)
(declare-fun count (Int listOfInt Int) Bool)
(declare-fun ff () Bool)

(assert
  (forall ( (A Int) )
    (insort A nillistOfInt (conslistOfInt A nillistOfInt))
  )
)
(assert
  (forall ( (A Int) (B Int) (C listOfInt) )
    (=>
      (<= A (- B 1))
      (insort A (conslistOfInt B C) (conslistOfInt A (conslistOfInt B C)))
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C listOfInt) (D listOfInt) )
    (=>
      (and
        (>= A B)
        (insort A C D)
      )
      (insort A (conslistOfInt B C) (conslistOfInt B D))
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Bool) )
    (=>
      (and
        (= C true)
        (>= A 0)
        (>= (- B A) 1)
      )
      (less A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Bool) )
    (=>
      (and
        (= C false)
        (<= (- B A) 0)
        (>= B 0)
      )
      (less A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Bool) )
    (=>
      (and
        (= C true)
        (>= A 0)
        (<= A B)
      )
      (leq A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Bool) )
    (=>
      (and
        (= C false)
        (>= A (+ B 1))
        (>= B 0)
      )
      (leq A B C)
    )
  )
)
(assert
    (sort nillistOfInt nillistOfInt)
)
(assert
  (forall ( (A Int) (B listOfInt) (C listOfInt) (D listOfInt) )
    (=>
      (and
        (sort B D)
        (insort A D C)
      )
      (sort (conslistOfInt A B) C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) )
    (=>
      (= B 0)
      (count A nillistOfInt B)
    )
  )
)
(assert
  (forall ( (A Int) (B listOfInt) (C Int) (D Int) )
    (=>
      (and
        (= C (+ 1 D))
        (count A B D)
      )
      (count A (conslistOfInt A B) C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C listOfInt) (D Int) )
    (=>
      (and
        (>= (- B A) 1)
        (count A C D)
      )
      (count A (conslistOfInt B C) D)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C listOfInt) (D Int) )
    (=>
      (and
        (<= (- B A) (- 1))
        (count A C D)
      )
      (count A (conslistOfInt B C) D)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D listOfInt) (E listOfInt) )
    (=>
      (and
        (>= (- A B) 1)
        (count C D B)
        (sort D E)
        (count C E A)
      )
      ff
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D listOfInt) (E listOfInt) )
    (=>
      (and
        (<= (- A B) (- 1))
        (count C D B)
        (sort D E)
        (count C E A)
      )
      ff
    )
  )
)

(assert (not ff))
(check-sat)
