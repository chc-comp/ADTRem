; Automatically generated by map2smt

(set-logic HORN)

(declare-datatypes ((listOfInt 0) )
(((conslistOfInt (headlistOfInt Int) (taillistOfInt listOfInt)) (nillistOfInt))))



(declare-fun adt_new1 (listOfInt Bool) Bool)
(declare-fun last (listOfInt Int) Bool)
(declare-fun leq (Int Int Bool) Bool)
(declare-fun minus (Int Int Int) Bool)
(declare-fun len (listOfInt Int) Bool)
(declare-fun butlast (listOfInt listOfInt) Bool)
(declare-fun ff () Bool)

(assert
  (forall ( (A Int) )
    (last (conslistOfInt A nillistOfInt) A)
  )
)
(assert
  (forall ( (A Int) (B Int) (C listOfInt) (D Int) )
    (=>
      (last (conslistOfInt B C) D)
      (last (conslistOfInt A (conslistOfInt B C)) D)
    )
  )
)
(assert
  (forall ( (A Int) (B listOfInt) (C Bool) )
    (=>
      (= C false)
      (adt_new1 (conslistOfInt A B) C)
    )
  )
)
(assert
  (forall ( (A Bool) )
    (=>
      (= A true)
      (adt_new1 nillistOfInt A)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) )
    (=>
      (and
        (= C 0)
        (>= A 0)
        (>= (- B A) 1)
      )
      (minus A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) )
    (=>
      (and
        (= C (- A B))
        (<= B A)
        (>= A 0)
      )
      (minus A B C)
    )
  )
)
(assert
  (forall ( (A Int) )
    (=>
      (= A 0)
      (len nillistOfInt A)
    )
  )
)
(assert
  (forall ( (A Int) (B listOfInt) (C Int) (D Int) )
    (=>
      (and
        (= C (+ 1 D))
        (len B D)
      )
      (len (conslistOfInt A B) C)
    )
  )
)
(assert
    (butlast nillistOfInt nillistOfInt)
)
(assert
  (forall ( (A Int) )
    (butlast (conslistOfInt A nillistOfInt) nillistOfInt)
  )
)
(assert
  (forall ( (A Int) (B Int) (C listOfInt) (D listOfInt) )
    (=>
      (butlast (conslistOfInt B C) D)
      (butlast (conslistOfInt A (conslistOfInt B C)) (conslistOfInt A D))
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E listOfInt) (F listOfInt) )
    (=>
      (and
        (= A 1)
        (not (= B C))
        (= B (- D A))
        (>= B 0)
        (butlast E F)
        (len F C)
        (len E D)
      )
      ff
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E listOfInt) (F listOfInt) )
    (=>
      (and
        (= A 1)
        (not (= B C))
        (= B 0)
        (<= D (- A 1))
        (butlast E F)
        (len F C)
        (len E D)
      )
      ff
    )
  )
)

(assert (not ff))
(check-sat)
