; Automatically generated by map2smt

(set-logic HORN)

(declare-datatypes ((listOfInt 0) )
(((conslistOfInt (headlistOfInt Int) (taillistOfInt listOfInt)) (nillistOfInt))))



(declare-fun id_list (listOfInt listOfInt) Bool)
(declare-fun len (listOfInt Int) Bool)
(declare-fun append (listOfInt listOfInt listOfInt) Bool)
(declare-fun ff () Bool)

(assert
    (id_list nillistOfInt nillistOfInt)
)
(assert
  (forall ( (A Int) (B listOfInt) (C listOfInt) )
    (=>
      (id_list B C)
      (id_list (conslistOfInt A B) (conslistOfInt A C))
    )
  )
)
(assert
  (forall ( (A Int) )
    (=>
      (= A 0)
      (len nillistOfInt A)
    )
  )
)
(assert
  (forall ( (A Int) (B listOfInt) (C Int) (D Int) )
    (=>
      (and
        (= C (+ 1 D))
        (len B D)
      )
      (len (conslistOfInt A B) C)
    )
  )
)
(assert
  (forall ( (A listOfInt) )
    (append nillistOfInt A A)
  )
)
(assert
  (forall ( (A Int) (B listOfInt) (C listOfInt) (D listOfInt) )
    (=>
      (append B C D)
      (append (conslistOfInt A B) C (conslistOfInt A D))
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D listOfInt) (E listOfInt) (F listOfInt) )
    (=>
      (and
        (>= (- A B) 1)
        (= (* 2 C) A)
        (id_list D E)
        (append D E F)
        (len F B)
        (len D C)
      )
      ff
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D listOfInt) (E listOfInt) (F listOfInt) )
    (=>
      (and
        (<= (- A B) (- 1))
        (= (* 2 C) A)
        (id_list D E)
        (append D E F)
        (len F B)
        (len D C)
      )
      ff
    )
  )
)

(assert (not ff))
(check-sat)
